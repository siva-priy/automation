git branch #to create branch locally
git branch -d <branch-name> #delete branch locally
git push origin --delete <branch-name> #delete branch in remote repository
git clone <repo url> #to clone repository
git add <file-name> #add file which you were mentioned
git add . #add all files
git commit -m "updated" #commit all changes to staging directory with messeges
git push origin <branch-name> #pushing files in staging directory to remote
git checkout <branch-name> #changing to another branch
git merge <branch-name> #to merge branch to current branch
git revert <commit-id> #revert the changes from staging to local







pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID=""
        AWS_DEFAULT_REGION="ap-south-1"
        IMAGE_REPO_NAME="prod-uttara-app"
		ECS_SERVICE="prod-uttara-app"
		ECS_CLUSTER="prod-uttara"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        TAG_NAME = "latest"
    }

    stages {

    stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/myscheme-gov/myscheme-app.git']]])
            }
        }

	stage('Logging into AWS ECR') {
            steps {
                script {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }

            }
        }
    // Building Docker images
    stage('Building image') {
      steps{
        script {
                sh "ls -ltr"
                sh "cp -rf /home/prod-myscheme-frontend/.env.production /var/lib/jenkins/workspace/prod_myscheme_frontend_pipeline/"
                sh "cp -rf /home/prod-myscheme-frontend/config /var/lib/jenkins/workspace/prod_myscheme_frontend_pipeline/"
                sh "cp -rf /home/prod-myscheme-frontend/credentials /var/lib/jenkins/workspace/prod_myscheme_frontend_pipeline/"
                sh "ls -altr"
                sh "docker build . -f Dockerfile-prod -t ${IMAGE_REPO_NAME}:${TAG_NAME} "
         }
      }
    }

    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{
         script {
                sh "docker tag ${IMAGE_REPO_NAME}:${TAG_NAME} ${REPOSITORY_URI}:${TAG_NAME}"
                sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${TAG_NAME}"
                sh "docker rmi ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${TAG_NAME}"
         }
        }
      }
    stage('Deploying to ECS') {
     steps{
         script {
                sh "aws ecs update-service --region ${AWS_DEFAULT_REGION} --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --task-definition ${ECS_SERVICE}:5 --force-new-deployment"
         }
        }
      }
}
}
